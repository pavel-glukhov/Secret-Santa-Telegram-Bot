import logging

from aiogram import types
from aiogram.types import ParseMode

from app import dispatcher as dp
from app.database import user_db
from app.keyborads.common import create_common_keyboards, keyboard_button

logger = logging.getLogger(__name__)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n"
        "–í–æ—Ç –∏ –Ω–∞—Å—Ç–∞–ª–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!\n\n"
        "–°–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥—Ä—É–∑–µ–π, –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.",
        parse_mode=ParseMode.MARKDOWN,
    )
    await root_menu(message)


async def create_user(message: types.Message):
    user_id = message.chat.id
    username = message.chat.username
    first_name = message.chat.first_name
    last_name = message.chat.last_name

    user, created = await user_db().get_or_create(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name
    )
    if created:
        logger.info(f'The new user "{user_id}" has been created')

    return user, created


@dp.message_handler(commands=['menu'], )
async def root_menu(message: types.Message, edit=False):
    user, created = await create_user(message)
    keyboard = await create_common_keyboards(message)
    menu_text_name = '*–ú–µ–Ω—é*'
    reminder_for_user = (
        'üëâ –ù–µ –∑–∞–±—É–¥—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ '
        '–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.\n'
        '–ò–Ω–∞—á–µ –°–∞–Ω—Ç–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫.üôÅ\n\n'
    )

    is_profile_filled_out = any([user.address, user.contact_number])

    if not is_profile_filled_out:
        text = reminder_for_user + menu_text_name
    else:
        text = menu_text_name

    if edit:
        await message.edit_text(text,
                                reply_markup=keyboard,
                                parse_mode=ParseMode.MARKDOWN,
                                )
    else:
        await message.answer(text,
                             reply_markup=keyboard,
                             parse_mode=ParseMode.MARKDOWN,
                             )


@dp.message_handler(commands=['about'])
async def about_game(message: types.Message):
    keyboard_inline = keyboard_button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è",
                                      callback="root_menu")

    text = '–≠—Ç–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞"'
    await message.edit_text(text,
                            reply_markup=keyboard_inline,
                            parse_mode=ParseMode.MARKDOWN,
                            )
