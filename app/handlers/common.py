import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from app import dispatcher as dp
from app.database import user_db
from app.keyborads.common import (create_common_keyboards,
                                  generate_inline_keyboard)

logger = logging.getLogger(__name__)


@dp.callback_query_handler(text_contains="cancel", state='*')
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    message = callback.message
    await state.reset_state()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await root_menu(message)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n"
        "–í–æ—Ç –∏ –Ω–∞—Å—Ç–∞–ª–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!\n\n"
        "–°–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥—Ä—É–∑–µ–π, –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.",
    )
    await root_menu(message)


# TODO –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ –Ω–∞ –º–∏–¥–ª–≤–∞—Ä—å
async def create_user(message: types.Message):
    user_id = message.chat.id
    username = message.chat.username
    first_name = message.chat.first_name
    last_name = message.chat.last_name

    user, created = await user_db().get_or_create(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name
    )
    if created:
        logger.info(f'The new user "{user_id}" has been created')

    return user, created


@dp.callback_query_handler(Text(equals='root_menu'), )
@dp.message_handler(commands=['menu'], )
async def root_menu(data: types.Message | types.CallbackQuery, edit_message=False):
    message = data.message if isinstance(data, types.CallbackQuery) else data

    user, created = await create_user(message)
    keyboard = await create_common_keyboards(message)
    menu_text_name = '*–ú–µ–Ω—é*'

    is_profile_filled_out = all([user.address, user.contact_number])

    reminder_for_user = (
        '‚ùó *–ù–µ –∑–∞–±—É–¥—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç –∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ '
        '–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è*.\n\n'
        '‚ùó *–ò–Ω–∞—á–µ –°–∞–Ω—Ç–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫.*\n\n'
    )

    text = menu_text_name if is_profile_filled_out else reminder_for_user + menu_text_name

    if edit_message:
        await message.edit_text(text, reply_markup=keyboard, )
    else:
        await message.answer(text, reply_markup=keyboard, )


@dp.callback_query_handler(Text(equals='menu_about_game'))
@dp.message_handler(commands=['about'], )
async def about_game(data: types.Message | types.CallbackQuery, ):
    message = data.message if isinstance(data, types.CallbackQuery) else data

    keyboard_inline = generate_inline_keyboard(
        {
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": "root_menu",
        }
    )
    text = '–≠—Ç–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞"'  # TODO –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–± –∏–≥—Ä–µ
    await message.edit_text(text, reply_markup=keyboard_inline, )
