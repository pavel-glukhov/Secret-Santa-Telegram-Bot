import re

from aiogram.dispatcher.filters import Text

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.database.operations import RoomDB
from app import dispatcher as dp
from aiogram.types.message import ParseMode

from app.keyborads.common import create_common_keyboards


class CreateRoom(StatesGroup):
    waiting_for_room_name = State()
    waiting_for_room_budget = State()
    waiting_for_room_notes = State()


class JoinRoom(StatesGroup):
    waiting_for_room_number = State()


class DeleteRoom(StatesGroup):
    waiting_for_room_number = State()


@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞',
                         ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    keyboard = await create_common_keyboards(message)
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üî®",
                    state=None)
async def create_room(message: types.Message):
    await CreateRoom.waiting_for_room_name.set()
    await message.answer(
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É?\n'
        '–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ\n\n'
        '–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç–µ *–æ—Ç–º–µ–Ω–∞*',
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message_handler(state=CreateRoom.waiting_for_room_name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['room_name'] = message.text

    await CreateRoom.next()
    await message.answer(
        '–ü—Ä–∏–Ω—è—Ç–æ!\n\n'
        '–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç '
        '–Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã.\n'
        '–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å—É–º–º—É –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, '
        '–Ω–∞–ø—Ä–∏–º–µ—Ä 2000 —Ç–µ–Ω–≥–µ,'
        '200 —Ä—É–± –∏–ª–∏ 20$\n\n'
        '–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç–µ *–æ—Ç–º–µ–Ω–∞*',
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message_handler(state=CreateRoom.waiting_for_room_budget)
async def process_budget(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['room_budget'] = message.text

    await CreateRoom.next()
    await message.answer(
        '–ü—Ä–∏–Ω—è—Ç–æ!\n\n'
        '–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.\n'
        '–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫—É. '
        '–í–æ–∑–º–æ–∂–Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ–±–±–∏ –∏ '
        '—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–æ–µ?\n\n'
        '–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç–µ *–æ—Ç–º–µ–Ω–∞*',
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(state=CreateRoom.waiting_for_room_notes)
async def process_notes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_notes'] = message.text

    await state.finish()

    room = await RoomDB().create_room(user_note=data['user_notes'],
                                      owner=message.chat.id,
                                      name=data['room_name'],
                                      budget=data['room_budget'])

    keyboard = await create_common_keyboards(message)

    await message.answer(
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        f'–ö–æ–º–Ω–∞—Ç–∞ *"{room.name}"*'
        f'—Å–æ–∑–¥–∞–Ω–∞. \n'
        f'–î–µ—Ä–∂–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã *{room.number}*\n'
        f'–≠—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, '
        f'—á—Ç–æ –±—ã –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å '
        f'–∫ —Ç–≤–æ–µ–π –∏–≥—Ä–µ.\n\n',
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: message.text == "–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É üè†",
                    state=None)
async def join_room(message: types.Message):
    await JoinRoom.waiting_for_room_number.set()
    await message.answer(
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–π—Ç–∏.\n\n'
        '–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç–µ *–æ—Ç–º–µ–Ω–∞*',
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message_handler(state=JoinRoom.waiting_for_room_number)
async def joined_room(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['room_number'] = message.text

    if isinstance(int, data['room_number']):
        result = await RoomDB().add_member(
            user_id=message.chat.id,
            room_number=data['room_number']
        )
    else:
        result = False

    keyboard = await create_common_keyboards(message)

    await state.finish()
    if result:
        await message.answer(
            '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
            '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    else:
        await message.answer(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
            parse_mode=ParseMode.MARKDOWN,
        )


@dp.message_handler(lambda message: message.text.startswith("–í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞:"))
async def my_room(message: types.Message):
    number_room = re.findall(r'\d{6}', message.text)[0]
    keyboard_inline = types.InlineKeyboardMarkup()

    keyboard_list = [
        types.InlineKeyboardButton(
            text="–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•",
            callback_data=f"room_memblist_{number_room}"
        ),
        types.InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–æ–º–Ω–∞—Ç—ã ‚öí",
            callback_data=f"room_chname_{number_room}"
        ),
        types.InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è üéÅ",
            callback_data=f"room_chnotes_{number_room}"
        ), types.InlineKeyboardButton(
            text="–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã üö™",
            callback_data=f"room_exit_{number_room}"
        ), types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É ‚ùå",
            callback_data=f"room_delete_{number_room}"
        ),
    ]

    for button in keyboard_list:
        keyboard_inline.add(button)

    await message.answer(f"–í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ {number_room}",
                         reply_markup=keyboard_inline)


@dp.message_handler(state=None)
async def delete_room(message: types.Message, room_number: int):
    await DeleteRoom.waiting_for_room_number.set()
    state = dp.get_current().current_state()
    await state.update_data(room_number=room_number)

    await message.edit_text(
        f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã {room_number}, '
        f'–≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç *–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é*.\n\n '
        '–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç–µ *–æ—Ç–º–µ–Ω–∞*',
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message_handler(state=DeleteRoom.waiting_for_room_number)
async def answer_delete_room(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['confirmation'] = message.text.lower()

    if data['confirmation'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        await RoomDB().delete_room(room_number=data['room_number'])

        keyboard = await create_common_keyboards(message)

        await message.answer(
            '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n\n'
            '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

    else:
        # TODO –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
        await message.answer(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            parse_mode=ParseMode.MARKDOWN,
        )
    await state.finish()
