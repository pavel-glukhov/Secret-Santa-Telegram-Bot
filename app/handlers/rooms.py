import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.database.config import async_session
from app.database.operations import RoomDB, UserDB
from app import dispatcher as dp, bot
import random
from aiogram.types.message import ParseMode


class CreateRoom(StatesGroup):
    waiting_for_room_name = State()
    waiting_for_room_budget = State()
    waiting_for_room_notes = State()


@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üî®")
async def create_room(message: types.Message):
    await CreateRoom.waiting_for_room_name.set()
    await message.answer('"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
                         '–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É?\n'
                         '–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ')


@dp.message_handler(state=CreateRoom.waiting_for_room_name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['room_name'] = message.text

    await CreateRoom.next()
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ!\n\n'
                         '–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç '
                         '–Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã.\n'
                         '–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å—É–º–º—É –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, '
                         '–Ω–∞–ø—Ä–∏–º–µ—Ä 2000 —Ç–µ–Ω–≥–µ,'
                         '200 —Ä—É–± –∏–ª–∏ 20$')


@dp.message_handler(state=CreateRoom.waiting_for_room_budget)
async def process_budget(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['room_budget'] = message.text

    await CreateRoom.next()
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ!\n\n'
                         '–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫—É. '
                         '–í–æ–∑–º–æ–∂–Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ–±–±–∏ –∏ '
                         '—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–æ–µ?'
                         )


@dp.message_handler(state=CreateRoom.waiting_for_room_notes)
async def process_notes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_notes'] = message.text
        logging.info('11111111111111111111111111111111')
        async with async_session() as db_session:
            async with db_session.begin():
                room = await RoomDB(db_session).create_room(
                    name=data['room_name'],
                    owner_id=message.chat.id,
                    budget=data['room_budget'],
                    user_note=data['user_notes']
                )
        logging.info('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
        await message.answer('"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
                             f'–ö–æ–º–Ω–∞—Ç–∞ *"{room.name}"*'
                             f'—Å–æ–∑–¥–∞–Ω–∞. \n'
                             f'–î–µ—Ä–∂–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã *{room.number}*\n'
                             f'–≠—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, '
                             f'—á—Ç–æ –±—ã –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å '
                             f'–∫ —Ç–≤–æ–µ–π –∏–≥—Ä–µ.',
                             parse_mode=ParseMode.MARKDOWN
                             )
        await state.finish()


@dp.message_handler(lambda message: message.text == "–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É üè†")
async def join_room(message: types.Message):
    await message.answer('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É üî®"')
