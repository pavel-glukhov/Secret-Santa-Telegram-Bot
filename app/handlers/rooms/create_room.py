import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode

from app import bot
from app import dispatcher as dp
from app.database import room_db
from app.keyborads.common import keyboard_button

logger = logging.getLogger(__name__)


class CreateRoom(StatesGroup):
    waiting_for_room_name = State()
    waiting_for_room_budget = State()
    waiting_for_room_wishes = State()


async def create_room(message: types.Message):
    await CreateRoom.waiting_for_room_name.set()
    keyboard_inline = keyboard_button(text="–û—Ç–º–µ–Ω–∞",
                                      callback='cancel')

    await message.answer(
        '–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É?\n'
        '–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ\n\n'
        '–ò–º—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤.\n',
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard_inline
    )


@dp.message_handler(state=CreateRoom.waiting_for_room_name)
async def process_name(message: types.Message, state: FSMContext):
    keyboard_inline = keyboard_button(text="–û—Ç–º–µ–Ω–∞",
                                      callback='cancel')
    room_name = message.text
    await state.update_data(room_name=room_name)

    if not len(room_name) < 13:
        keyboard_inline = keyboard_button(text="–û—Ç–º–µ–Ω–∞",
                                          callback='cancel')
        return await message.reply(
            text='–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è, '
                 '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ.\n'
                 '–ò–º—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤.\n',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard_inline
        )

    await CreateRoom.next()
    await bot.delete_message(chat_id=message.from_user.id,
                             message_id=message.message_id)

    await message.answer(
        f'–ü—Ä–∏–Ω—è—Ç–æ! –ò–º—è —Ç–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã *{room_name}*\n\n'
        '–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç '
        '–Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã.\n'
        '–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å—É–º–º—É –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, '
        '–Ω–∞–ø—Ä–∏–º–µ—Ä 2000 —Ç–µ–Ω–≥–µ,'
        '200 —Ä—É–± –∏–ª–∏ 20$\n',
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard_inline
    )


@dp.message_handler(state=CreateRoom.waiting_for_room_budget)
async def process_budget(message: types.Message, state: FSMContext):
    keyboard_inline = keyboard_button(text="–û—Ç–º–µ–Ω–∞",
                                      callback='cancel')

    room_budget = message.text
    await state.update_data(room_budget=room_budget)

    await CreateRoom.next()
    await bot.delete_message(chat_id=message.from_user.id,
                             message_id=message.message_id)

    await message.answer(
        f'–ü—Ä–∏–Ω—è—Ç–æ! –í–∞—à –±—é–¥–∂–µ—Ç –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å *{room_budget}*\n\n'
        '–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.\n'
        '–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫—É. '
        '–í–æ–∑–º–æ–∂–Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ–±–±–∏ –∏ '
        '—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–æ–µ?\n',
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard_inline
    )


@dp.message_handler(state=CreateRoom.waiting_for_room_wishes)
async def process_wishes(message: types.Message, state: FSMContext):
    user_wishes = message.text
    data = await state.get_data()

    keyboard_inline = keyboard_button(text="–ú–µ–Ω—é ‚óÄÔ∏è",
                                      callback='root_menu')

    room = await room_db().create_room(user_wish=user_wishes,
                                       owner=message.chat.id,
                                       name=data['room_name'],
                                       budget=data['room_budget'])

    logger.info(f'The new room "{room.number}" '
                f'has been created by {message.chat.id}')

    await bot.delete_message(chat_id=message.from_user.id,
                             message_id=message.message_id)

    await message.answer(
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        f'–ö–æ–º–Ω–∞—Ç–∞ *"{room.name}"* —Å–æ–∑–¥–∞–Ω–∞.\n'
        f'–î–µ—Ä–∂–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã *{room.number}*\n'
        f'–≠—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, '
        f'—á—Ç–æ –±—ã –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å '
        f'–∫ —Ç–≤–æ–µ–π –∏–≥—Ä–µ.\n\n',
        parse_mode=ParseMode.MARKDOWN,
    )
    await message.answer(
        "–ê –ø–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard_inline,
    )
    await state.finish()
