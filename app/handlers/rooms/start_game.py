import logging
import re
from datetime import datetime

from aiogram.dispatcher import FSMContext

from app.scheduler.operations import get_task, add_task, remove_task
from aiogram import types
from aiogram.dispatcher.filters.state import StatesGroup, State
from app.keyborads.common import generate_inline_keyboard


from app import dispatcher as dp

logger = logging.getLogger(__name__)


class StartGame(StatesGroup):
    waiting_for_datetime = State()


# TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
async def start_game(message: types.Message, room_number, keyboard_inline=None):
    task = await get_task(task_id=room_number)

    keyboard = {
        "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üëã": f"room_change-game-dt_{room_number}",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": f"room_menu_{room_number}"

    }
    keyboard_inline = generate_inline_keyboard(keyboard)
    if task:
        await message.answer(
            f'–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task.next_run_time.strftime("%b-%d-%Y %H:%M")}',
            reply_markup=keyboard_inline
        )
    else:
        await message.answer(
            f'–í—Ä–µ–º—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ',
            reply_markup=keyboard_inline
        )


async def change_game_datetime(message: types.Message, room_number):
    await StartGame.waiting_for_datetime.set()
    state = dp.get_current().current_state()
    await state.update_data(room_number=room_number)

    keyboard_inline = generate_inline_keyboard(
        {
            "–û—Ç–º–µ–Ω–∞": 'cancel'
        }
    )

    await message.answer(
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ-–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
        '*yyyy, mm, dd, h, m* - *–≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, —á–∞—Å, –º–∏–Ω—É—Ç—ã*\n\n'
        '*–ü—Ä–∏–º–µ—Ä: 2022,12,1,12,00*'
        ,
        reply_markup=keyboard_inline
    )


def pass_():
    pass


# TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
@dp.message_handler(state=StartGame.waiting_for_datetime)
async def process_waiting_datetime(message: types.Message, state: FSMContext):
    data = await state.get_data()
    room_number = data['room_number']

    keyboard_inline = generate_inline_keyboard(
        {
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è":f"room_menu_{room_number}"
        }
    )

    match = re.fullmatch(r'\d{4},\d{1,2},\d{1,2},\d{1,2},\d{1,2}',
                         message.text)

    if match:
        date = list(map(int, message.text.split(',')))
        task = await get_task(task_id=room_number)
        if task:
            task.remove()

        task = await add_task(task_func=pass_,
                              date_time=datetime(*date),
                              task_id=room_number)

        await message.answer(
            '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n',
            f'–Ø –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞–Ω–∏–µ, –≤–∞—à–∞ –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è: {task.next_run_time.strftime("%b-%d-%Y %H:%M")}',
            reply_markup=keyboard_inline
        )
    await state.finish()
