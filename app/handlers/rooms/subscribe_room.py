from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode

from app import dispatcher as dp
from app.database import room_db, wish_db
from app.keyborads.common import create_common_keyboards


class JoinRoom(StatesGroup):
    waiting_for_room_number = State()
    waiting_for_wishes = State()


async def join_room(message: types.Message):
    await JoinRoom.waiting_for_room_number.set()
    await message.answer(
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–π—Ç–∏.\n\n'
        '–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç–µ *–æ—Ç–º–µ–Ω–∞*',
        parse_mode=ParseMode.MARKDOWN,
    )


async def process_room_number(message: types.Message, state: FSMContext):
    user_id = message.chat.id

    async with state.proxy() as data:
        data['room_number'] = message.text

    room_number = message.text
    is_exists = await room_db().is_exists(room_number=room_number)

    if not is_exists:
        await message.answer(
            '–í–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        is_member = await room_db().is_member(user_id=user_id,
                                              room_number=room_number)

        if is_member:
            keyboard = await create_common_keyboards(message)
            await message.answer(
                '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.',
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
            await state.finish()

        else:
            await JoinRoom.next()
            await message.answer(
                '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É. '
                '–í–æ–∑–º–æ–∂–Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ–±–±–∏ –∏ '
                '—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–æ–µ?\n'
                '–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–º–æ–≥—É—Ç –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ '
                '–≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ–∫.\n\n'
                '–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç–µ *–æ—Ç–º–µ–Ω–∞*',
                parse_mode=ParseMode.MARKDOWN
            )


async def process_room_wishes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['wishes'] = message.text
        user_id = message.chat.id
        await room_db().add_member(user_id=user_id,
                                   room_number=data['room_number'])
        await wish_db().update_or_create(wish=data['wishes'],
                                         user_id=user_id,
                                         room_id=data['room_number'])
        keyboard = await create_common_keyboards(message)
        await message.answer(
            '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
            '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å —Å —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏.\n'
            '–°–ª–µ–¥–∏ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã.\n\n'
            '–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã! üòã',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

        await state.finish()
