import asyncio
import logging
import re
from datetime import datetime

import pytz
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from app.bot import dispatcher as dp
from app.bot.handlers.game.states import StartGame
from app.bot.handlers.operations import delete_user_message, get_room_number
from app.bot.keyborads.common import generate_inline_keyboard
from app.bot.messages.result_mailing import send_result_of_game
from app.store.queries.rooms import RoomRepo
from app.store.queries.users import UserRepo
from app.store.scheduler.operations import add_task, get_task

logger = logging.getLogger(__name__)


@dp.callback_query_handler(Text(startswith='room_start-game'))
async def start_game(callback: types.CallbackQuery):
    room_number = get_room_number(callback)
    room_members = await RoomRepo().get_list_members(room_number)
    task = get_task(task_id=room_number)
    user = await UserRepo().get_user_or_none(callback.message.chat.id)
    timezone = user.timezone or ('‚ö†Ô∏è –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –∑–∞–¥–∞–Ω. '
                                 '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è,'
                                 ' –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å,'
                                 ' –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞.')
    keyboard = {
        "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üïò": f"room_change-game-dt_{room_number}",
        "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üïò": f"change_time_zone_{room_number}",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": f"room_menu_{room_number}"
    }
    
    if not len(list(room_members)) >= 3:
        message_text = (
            '<b>–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º '
            '3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–≥—Ä—ã</b>'
        )
        keyboard.pop("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üïò")
    
    else:
        if not task:
            message_text = (
                '<b>–í—Ä–µ–º—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</b>\n\n'
                '<b>–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–≥—Ä—ã</b>\n\n'
                f'<b>–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>: {timezone}'
            )
        else:
            message_text = (
                '<b>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:</b>'
                f' {task.next_run_time.strftime("%b-%d-%Y %H:%M")}'
            )
    
    keyboard_inline = generate_inline_keyboard(keyboard)
    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard_inline,
    )


@dp.callback_query_handler(Text(startswith='room_change-game-dt'))
async def change_game_datetime(callback: types.CallbackQuery):
    room_number = get_room_number(callback)
    await StartGame.waiting_for_datetime.set()
    state = dp.get_current().current_state()
    await state.update_data(room_number=room_number)
    
    keyboard_inline = generate_inline_keyboard({"–û—Ç–º–µ–Ω–∞": 'cancel'})
    
    message_text = (
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ-–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏, '
        '–æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
        '<b>yyyy.mm.dd h:m</b> - <b>–≥–æ–¥.–º–µ—Å—è—Ü.–¥–µ–Ω—å —á–∞—Å:–º–∏–Ω—É—Ç—ã</b>\n\n'
        '<b>–ü—Ä–∏–º–µ—Ä: 2023.12.01 12:00</b>'
    )
    
    async with state.proxy() as data:
        data['last_message'] = await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard_inline,
        )


def convert_datetime_with_timezone(datetime_obj: datetime,
                                   timezone) -> datetime:
    return timezone.localize(datetime_obj)


@dp.message_handler(state=StartGame.waiting_for_datetime)
async def process_waiting_datetime(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    room_number = state_data['room_number']
    last_message = state_data['last_message']
    text = message.text
    user = await UserRepo().get_user_or_none(message.chat.id)
    timezone = user.timezone
    semaphore = asyncio.Semaphore(1)
    await delete_user_message(message.from_user.id, message.message_id)
    cancel_keyboard_inline = generate_inline_keyboard({"–û—Ç–º–µ–Ω–∞": 'cancel'})
    keyboard_inline = generate_inline_keyboard(
        {
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": f"room_menu_{room_number}"
        }
    )
    if timezone:
        timezone = pytz.timezone(timezone)
        datetime_obj = convert_datetime_with_timezone(_parse_date(text),
                                                      timezone)
        current_time = datetime.now(timezone)
    else:
        datetime_obj = _parse_date(text)
        current_time = datetime.now()
    
    if datetime_obj:
        if datetime_obj > current_time:
            if task := get_task(task_id=room_number):
                task.remove()
            
            add_task(task_func=send_result_of_game, date_time=datetime_obj,
                     task_id=room_number, room_number=room_number,
                     semaphore=semaphore)
            await RoomRepo().update(room_number, started_at=datetime.now(),
                                    closed_at=None, is_closed=False)
            
            message_text = (
                '–î–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞'
                f' {datetime_obj.strftime("%Y-%b-%d, %H:%M:%S")}'
            )
            await last_message.edit_text(
                text=message_text,
                reply_markup=keyboard_inline
            )
            await state.finish()
        else:
            current_time_str = current_time.strftime('%Y-%b-%d, %H:%M:%S')
            datetime_obj_str = datetime_obj.strftime('%Y-%b-%d, %H:%M:%S')
            message_text = (
                '–í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É—Ç–µ —Å–Ω–æ–≤–∞ –∏ —É–∫–∞–∂–∏—Ç–µ '
                '–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏. \n\n'
                f'<b>–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:</b> {current_time_str}\n'
                f'<b>–í–∞—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {datetime_obj_str}'
            )
            
            await _incorrect_data_format(last_message, message_text,
                                         cancel_keyboard_inline)
    else:
        message_text = (
            '–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É.\n\n –ü–æ–ø—Ä–æ–±—É—Ç–µ —Å–Ω–æ–≤–∞ –∏ —É–∫–∞–∂–∏—Ç–µ '
            '–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏.'
        )
        await _incorrect_data_format(last_message, message_text,
                                     cancel_keyboard_inline)


def _parse_date(text) -> datetime | bool:
    time_format_variants = ['%Y,%m,%d,%H,%M', '%Y %m %d %H:%M',
                            '%Y.%m.%d %H:%M', '%Y\\%m\\%d %H:%M',
                            '%Y/%m/%d %H:%M', '%Y %m %d %H %M']
    
    pattern = (r'\d{4}[\s.,/\\]?\d{1,2}[\s.,/\\]?\d{1,2}'
               r'[\s.,/\\]?\d{1,2}[\s.,:/]?\d{1,2}')
    matches = re.findall(pattern, text)
    
    if matches:
        for time_str in matches:
            for fmt in time_format_variants:
                try:
                    date_time = datetime.strptime(time_str, fmt)
                    return date_time
                
                except ValueError:
                    pass
    
    return False


async def _incorrect_data_format(
        message: types.Message,
        text: str,
        keyboard_inline: types.InlineKeyboardMarkup) -> None:
    await message.edit_text(
        text=text,
        reply_markup=keyboard_inline
    )
