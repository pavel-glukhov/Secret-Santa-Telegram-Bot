import logging
import re
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from app.bot import dispatcher as dp
from app.bot.keyborads.common import generate_inline_keyboard
from app.store.scheduler.operations import add_task, get_task
from app.bot.handlers.utils.common import get_room_number

logger = logging.getLogger(__name__)


class StartGame(StatesGroup):
    waiting_for_datetime = State()


@dp.callback_query_handler(Text(startswith='room_start-game'))
async def start_game(callback: types.CallbackQuery):
    room_number = get_room_number(callback)
    message = callback.message
    task = await get_task(task_id=room_number)

    keyboard = {
        "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üëã": f"room_change-game-dt_{room_number}",
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": f"room_menu_{room_number}",

    }
    keyboard_inline = generate_inline_keyboard(keyboard)
    if task:
        await message.answer(
            f'–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task.next_run_time.strftime("%b-%d-%Y %H:%M")}',
            reply_markup=keyboard_inline
        )
    else:
        await message.answer(
            f'–í—Ä–µ–º—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ',
            reply_markup=keyboard_inline
        )


@dp.callback_query_handler(Text(startswith='room_change-game-dt'))
async def change_game_datetime(callback: types.CallbackQuery):
    room_number = get_room_number(callback)
    await StartGame.waiting_for_datetime.set()
    state = dp.get_current().current_state()
    await state.update_data(room_number=room_number)

    keyboard_inline = generate_inline_keyboard(
        {
            "–û—Ç–º–µ–Ω–∞": 'cancel',
        }
    )

    await callback.message.answer(
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ-–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
        '*yyyy, mm, dd, h, m* - *–≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, —á–∞—Å, –º–∏–Ω—É—Ç—ã*\n\n'
        '*–ü—Ä–∏–º–µ—Ä: 2022,12,1,12,00*'
        ,
        reply_markup=keyboard_inline
    )


def pass_():
    pass


@dp.message_handler(state=StartGame.waiting_for_datetime)
async def process_waiting_datetime(message: types.Message, state: FSMContext):
    data = await state.get_data()
    room_number = data['room_number']

    keyboard_inline = generate_inline_keyboard(
        {
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": f"room_menu_{room_number}"
        }
    )

    match = re.fullmatch(r'\d{4},\d{1,2},\d{1,2},\d{1,2},\d{1,2}',
                         message.text)

    if match:
        date = list(map(int, message.text.split(',')))
        task = await get_task(task_id=room_number)
        if task:
            task.remove()

        task = await add_task(task_func=pass_,  # TODO –ø–æ–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
                              date_time=datetime(*date),
                              task_id=room_number)

        await message.answer(
            '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n',
            f'–Ø –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞–Ω–∏–µ, –≤–∞—à–∞ –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è: {task.next_run_time.strftime("%b-%d-%Y %H:%M")}',
            reply_markup=keyboard_inline
        )
    await state.finish()
