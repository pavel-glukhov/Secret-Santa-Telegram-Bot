import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from app.bot import dispatcher as dp
from app.bot.handlers.operations import delete_user_message
from app.bot.states.rooms import JoinRoom
from app.bot.keyborads.common import (create_common_keyboards,
                                      generate_inline_keyboard)
from app.store.queries.rooms import RoomRepo
from app.store.queries.wishes import WishRepo

logger = logging.getLogger(__name__)


@dp.callback_query_handler(Text(equals='menu_join_room'))
async def join_room(callback: types.CallbackQuery):
    state = dp.get_current().current_state()
    await JoinRoom.waiting_for_room_number.set()
    keyboard_inline = generate_inline_keyboard(
        {
            "–û—Ç–º–µ–Ω–∞": 'cancel',
        }
    )
    message_text = (
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–π—Ç–∏.\n'
    )
    async with state.proxy() as data:
        data['chat_id'] = callback.message.chat.id
        data['last_message'] = await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard_inline,
        )


@dp.message_handler(state=JoinRoom.waiting_for_room_number)
async def process_room_number(message: types.Message):
    state = dp.get_current().current_state()
    await state.update_data(room_number=message.text)
    state_data = await state.get_data()
    
    last_message = state_data['last_message']
    await state.update_data(room_number=state_data['room_number'])
    keyboard_inline = generate_inline_keyboard(
        {
            "–û—Ç–º–µ–Ω–∞": 'cancel',
        }
    )
    
    if not state_data['room_number'].isdigit():
        message_text = (
            '–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, '
            '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )
        await delete_user_message(message.from_user.id, message.message_id)
        return await last_message.edit_text(
            text=message_text,
            reply_markup=keyboard_inline,
        )
    
    room = await RoomRepo().get(room_number=state_data['room_number'])
    
    if not room or room.is_closed is True:
        await delete_user_message(message.from_user.id, message.message_id)
        return await _is_not_exists_room(last_message,
                                         state_data['room_number'],
                                         keyboard_inline)
    is_member_of_room = await RoomRepo().is_member(
        user_id=message.chat.id,
        room_number=state_data['room_number']
    )
    await delete_user_message(message.from_user.id, message.message_id)
    if is_member_of_room:
        keyboard_inline = await create_common_keyboards(message)
        
        message_text = '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.'
        
        await last_message.edit_text(
            text=message_text,
            reply_markup=keyboard_inline,
        )
        logger.info(
            f'The user[{message.from_user.id}] '
            f'already is member of the room [{state_data["room_number"]}]'
        )
        await state.finish()
    
    else:
        await JoinRoom.next()
        
        message_text = (
            '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É. '
            '–í–æ–∑–º–æ–∂–Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ–±–±–∏ –∏ '
            '—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–æ–µ?\n'
            '–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–º–æ–≥—É—Ç –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ '
            '–≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ–∫.\n'
        )
        
        await last_message.edit_text(
            text=message_text,
            reply_markup=keyboard_inline,
        )
    

async def _is_not_exists_room(message, room_number, keyboard_inline):
    message_text = (
        '–í–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã.'
    )
    
    await message.edit_text(
        text=message_text,
        reply_markup=keyboard_inline,
    )
    
    logger.info(
        f'Incorrect room number [{room_number}] '
        f'from [{message.from_user.id}]'
    )


@dp.message_handler(state=JoinRoom.waiting_for_wishes)
async def process_room_wishes(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    wishes = message.text
    chat_id = state_data['chat_id']
    room_number = state_data['room_number']
    last_message = state_data['last_message']
    
    await RoomRepo().add_member(
        user_id=chat_id,
        room_number=room_number
    )
    
    await WishRepo().create_wish_for_room(
        wish=wishes,
        user_id=chat_id,
        room_id=room_number
    )

    keyboard_inline = generate_inline_keyboard(
        {
            "–í –∫–æ–º–Ω–∞—Ç—É ‚û°Ô∏è": f"room_menu_{room_number}",
        }
    )
    await delete_user_message(message.from_user.id, message.message_id)
    message_text = (
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        f'–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É <b>{room_number}</b>.\n'
        '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å —Å —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏.\n'
        '–°–ª–µ–¥–∏ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã.\n\n'
        '–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã! üòã'
    )
    
    await last_message.edit_text(
        text=message_text,
        reply_markup=keyboard_inline,
    )
    logger.info(
        f'The user[{message.from_user.id}] '
        f'successful subscribed to the room [{state_data["room_number"]}]'
    )
    await state.finish()


#