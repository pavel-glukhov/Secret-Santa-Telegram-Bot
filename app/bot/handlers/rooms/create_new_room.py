import logging

from aiogram import F, Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from app.bot.keyborads.common import generate_inline_keyboard
from app.bot.states.rooms import CreateRoom
from app.config import load_config
from app.store.database.queries.rooms import RoomRepo

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == 'menu_create_new_room')
async def create_room(callback: types.CallbackQuery, state: FSMContext, session: Session):
    count_user_rooms = await RoomRepo(session).get_count_user_rooms(
        callback.message.chat.id)
    logger.info(count_user_rooms)
    if count_user_rooms >= load_config().room.user_rooms_count:
        keyboard_inline = generate_inline_keyboard(
            {
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": "root_menu",
            }
        )
        message_text = (
            '<b>–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞, '
            '—Ç.–∫. –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞.</b>\n\n '
            '–í—ã –º–æ–∂–µ—Ç–µ —è–≤–ª—è—Ç—å—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–æ–ª—å–∫–æ 10 –∫–æ–º–Ω–∞—Ç.'
        )
        return await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard_inline
        )
    
    keyboard_inline = generate_inline_keyboard({"–û—Ç–º–µ–Ω–∞": 'cancel'})
    
    message_text = (
        '–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        '–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É?\n'
        '–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ\n\n'
        '–ò–º—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤.\n'
    )
    
    initial_bot_message = await callback.message.edit_text(text=message_text, reply_markup=keyboard_inline)
    
    await state.update_data(bot_message_id=initial_bot_message)
    await state.set_state(CreateRoom.waiting_for_room_name)


@router.message(CreateRoom.waiting_for_room_name)
async def process_name(message: types.Message, state: FSMContext):
    room_name = message.text
    state_data = await state.get_data()
    await message.delete()
    
    bot_message = state_data['bot_message_id']
    await state.update_data(room_name=room_name)
    await state.update_data(budget_question_id=message.message_id)
    keyboard_inline = generate_inline_keyboard({"–û—Ç–º–µ–Ω–∞": 'cancel'})
    
    if not len(room_name) < 17:
        keyboard_inline = generate_inline_keyboard({"–û—Ç–º–µ–Ω–∞": 'cancel'})
        
        message_text = (
            '–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è, '
            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ.\n'
            '–ò–º—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤.\n'
        )
        
        return await bot_message.edit_text(text=message_text, reply_markup=keyboard_inline)
    await state.set_state(CreateRoom.waiting_for_room_budget)
    
    message_text = (
        f'–ü—Ä–∏–Ω—è—Ç–æ! –ò–º—è —Ç–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã <b>{room_name}</b>\n\n'
        '–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç '
        '–Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã.\n'
        '–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å—É–º–º—É –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, '
        '–Ω–∞–ø—Ä–∏–º–µ—Ä 2000 —Ç–µ–Ω–≥–µ,'
        '200 —Ä—É–±–ª–µ–π –∏–ª–∏ 20$\n\n'
        '–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤.'
    )
    
    await bot_message.edit_text(text=message_text, reply_markup=keyboard_inline)


@router.message(lambda message:
                len(message.text.lower()) > 16,
                StateFilter(CreateRoom.waiting_for_room_budget))
async def process_budget_invalid(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    await message.delete()
    
    bot_message = state_data['bot_message_id']
    keyboard_inline = generate_inline_keyboard({"–û—Ç–º–µ–Ω–∞": 'cancel'})
    logger.info('long budget message'
                f' command from [{message.from_user.id}] ')
    
    message_text = (
        '–í—ã –≤–≤–µ–¥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—é–¥–∂–µ—Ç–∞.\n '
        '–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤\n'
        '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
    )
    await bot_message.edit_text(text=message_text, reply_markup=keyboard_inline)


@router.message(CreateRoom.waiting_for_room_budget)
async def process_budget(message: types.Message, state: FSMContext):
    await state.update_data(wishes_question_message_id=message.message_id)
    state_data = await state.get_data()
    await message.delete()
    
    bot_message = state_data['bot_message_id']
    keyboard_inline = generate_inline_keyboard({"–û—Ç–º–µ–Ω–∞": 'cancel'})
    room_budget = message.text
    await state.update_data(room_budget=room_budget)
    
    await state.set_state(CreateRoom.waiting_for_room_wishes)
    
    message_text = (
        f'–ü—Ä–∏–Ω—è—Ç–æ! –í–∞—à –±—é–¥–∂–µ—Ç –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å <b>{room_budget}</b>\n\n'
        '–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.\n'
        '–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫—É. '
        '–í–æ–∑–º–æ–∂–Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ–±–±–∏ –∏ '
        '—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–æ–µ?\n'
    )
    
    await bot_message.edit_text(text=message_text, reply_markup=keyboard_inline)


@router.message(CreateRoom.waiting_for_room_wishes)
async def process_wishes(message: types.Message, state: FSMContext, session: Session):
    user_wishes = message.text
    state_data = await state.get_data()
    await message.delete()
    
    bot_message = state_data['bot_message_id']
    keyboard_inline = generate_inline_keyboard({"–ú–µ–Ω—é ‚óÄÔ∏è": 'root_menu'})
    
    room = await RoomRepo(session).create(user_wish=user_wishes,
                                          owner_id=message.chat.id,
                                          name=state_data['room_name'],
                                          budget=state_data['room_budget'])
    
    logger.info(
        f'The new room "{room.number}" has been created by {message.chat.id}'
    )
    message_text = (
        '"–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n'
        f'–ö–æ–º–Ω–∞—Ç–∞ <b>"{room.name}"</b> —Å–æ–∑–¥–∞–Ω–∞.\n'
        f'–î–µ—Ä–∂–∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã <b>{room.number}</b>\n'
        f'–≠—Ç–æ—Ç –∫–æ–¥ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, '
        f'—á—Ç–æ –±—ã –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å '
        f'–∫ —Ç–≤–æ–µ–π –∏–≥—Ä–µ.\n\n'
    )
    
    await bot_message.edit_text(text=message_text)
    message_text = "–ê –ø–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    
    await bot_message.answer(
        text=message_text,
        reply_markup=keyboard_inline,
    )
    await state.clear()
