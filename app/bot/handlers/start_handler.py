import logging

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from app.bot.keyborads.common import (create_common_keyboards,
                                      generate_inline_keyboard)
from app.config import load_config
from app.store.database.queries.users import UserRepo

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext, session: Session):
    message = callback.message
    await state.clear()
    await root_menu(message, session)


@router.message(Command(commands=["start"]))
async def start(message: types.Message, state: FSMContext, session: Session):
    await state.clear()
    message_text = (
        "–•–æ-—Ö–æ-—Ö–æ! üéÖ\n\n"
        "–í–æ—Ç –∏ –Ω–∞—Å—Ç–∞–ª–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!\n\n"
        "–°–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –¥—Ä—É–∑–µ–π, –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π."
    )
    await message.answer(text=message_text)
    await root_menu(message, session=session, edit_message=False)


async def create_user_or_enable(message: types.Message, session: Session):
    user_id = message.chat.id
    username = message.chat.username
    first_name = message.chat.first_name
    last_name = message.chat.last_name
    user, created = await UserRepo(session).get_or_create(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name
    )
    if created:
        logger.info(f'The new user "{user_id}" has been created')
    
    if not user.is_active:
        await UserRepo(session).enable_user(message.chat.id)
        logger.info(f'The new user "{user_id}" has been enabled')
    return user


@router.callback_query(F.data == 'root_menu')
@router.message(Command(commands=['menu']))
async def root_menu(data: types.Message | types.CallbackQuery, session: Session, edit_message=True):
    message = data.message if isinstance(data, types.CallbackQuery) else data
    
    user = await create_user_or_enable(message, session)
    keyboard = await create_common_keyboards(message, session)
    
    is_profile_filled_out = all([user.encrypted_address, user.encrypted_number])
    
    text_reminder_notification_for_user = (
        '‚ùó <b>–ù–µ –∑–∞–±—É–¥—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç –∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ '
        '–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è</b>.\n\n'
        '‚ùó <b>–ò–Ω–∞—á–µ –°–∞–Ω—Ç–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫.</b>\n\n'
    )
    text_menu_message = '<b>–ú–µ–Ω—é</b>'
    
    message_text = (
        text_menu_message if is_profile_filled_out
        else text_reminder_notification_for_user + text_menu_message
    )
    
    if edit_message:
        await message.edit_text(text=message_text, reply_markup=keyboard)
    else:
        await message.answer(text=message_text, reply_markup=keyboard)


@router.callback_query(F.data == 'menu_about_game')
@router.message(Command(commands=['about']))
async def about_game(data: types.Message | types.CallbackQuery, ):
    message = data.message if isinstance(data, types.CallbackQuery) else data
    
    keyboard_inline = generate_inline_keyboard(
        {
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚óÄÔ∏è": "root_menu",
        }
    )
    message_text = (
        '<b>–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞</b> - —ç—Ç–æ –∏–≥—Ä–∞, '
        '–∫–æ—Ç–æ—Ä—É—é —á–∞—Å—Ç–æ –ø—Ä–æ–≤–æ–¥—è—Ç –ø–µ—Ä–µ–¥ –†–æ–∂–¥–µ—Å—Ç–≤–æ–º '
        '–∏–ª–∏ –ù–æ–≤—ã–º –ì–æ–¥–æ–º –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞—Ö, —Å–µ–º—å—è—Ö –∏–ª–∏ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π.\n'
        '  –≠—Ç–æ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å '
        '–≤ –æ–¥–Ω—É –∏–∑ –≥—Ä—É–ø–ø, –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.\n'
        '  –í –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ  –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –¥–ª—è —Ç–æ–≥–æ, '
        '—á—å–µ –∏–º—è –µ–º—É –≤—ã–ø–∞–ª–æ –ø—Ä–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫–µ. \n'
        '  –î–∞–ª–µ–µ, –∫–∞–∂–¥—ã–π —Ç–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å '
        '–¥–ª—è —Å–≤–æ–µ–≥–æ –æ–¥–∞—Ä–∏–≤–∞–µ–º–æ–≥–æ '
        '–ø–æ–¥–∞—Ä–æ–∫, –æ—Å—Ç–∞–≤–∞—è—Å—å –ø—Ä–∏ —ç—Ç–æ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–º.\n'
        '  –ü–æ–¥–∞—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ '
        '—É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤–æ –≤—Ä–µ–º—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏.\n'
        '  –ê –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã, –∫–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏—Ç '
        '—Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫, –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ—ë —Ç–∞–π–Ω–æ–µ –∏–º—è –∏ '
        '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö.\n\n'
        '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n'
        '–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n'
        '–û–¥–∏–Ω –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —è–≤–ª—è—Ç—å—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç–æ–ª—å–∫–æ '
        f'{load_config().room.user_rooms_count} –∫–æ–º–Ω–∞—Ç.\n\n'
        '  –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–æ–∫, –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, '
        f'–≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @{load_config().support_account}\n\n'
    )
    
    await message.edit_text(text=message_text, reply_markup=keyboard_inline)
